import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import 'dart:developer';

class DatabaseService {
  //  متحول لتخزين القاعدة
  // يمثل قاعدة البيانات. يتم تأجيل تهيئتها حتى وقت التشغيل.
  static late Database db;
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  ///والذي يمثل نسخة وحيدة من DatabaseService
  ///التي يمكن الوصول إليها من خلال instance.
  /// من شان يتعرف على الداتا بيز وقت الاقلاع
  // instance  تعيف يمة حالة القاعدة
  static final DatabaseService _instance = DatabaseService._();
// تُستخدم لإنشاء مثيل وحيد من DatabaseService
  // باني من نوع خاص
  DatabaseService._();

  // اخذ قيمة القاعدة 
  //وهي الطريقة الوحيدة المسموح بها للوصول إلى
  //instance
  //DatabaseService
  // باستخدام هذه الهيكلة، يمكنك الآن استخدام DatabaseService.instance للوصول إلى نسخة من DatabaseService واستخدام الوظائف الموجودة فيها للتفاعل مع قاعدة البيانات

  static DatabaseService get instance => _instance;
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  ///  تمهيد قاعدة البيانات بشكل اولي
  static Future<void> initDatabase() async {
    log('initDatabase');

    // اخذ مسار قاعدة البيانات
    var databasesPath = await getDatabasesPath();
    // تنشئ قاعدة بيانات SQLite باستخدام اسم محدد ('office_archiving.db')
    // وتضعها في المسار المسترجع من getDatabasesPath().
    var path = join(databasesPath, 'office_archiving.db');

    // فتح قاعدة البيانات
    // للقراءة والكتابة
    db = await openDatabase(path, readOnly: false);

    // قم بإنشاء الجداول إذا لم تكن موجودة
    //
    // (قسم) إنشاء  الجدول
    await db.execute('''
      CREATE TABLE IF NOT EXISTS section (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE
      )
    ''');
    // (عنصر) إنشاء  الجدول
    await db.execute('''
      CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        filePath TEXT NOT NULL,
        fileType TEXT NOT NULL,
        sectionId INTEGER NOT NULL,
        FOREIGN KEY(sectionId) REFERENCES section(id)
      )
    ''');
    //
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
//  List <int > list1= [213, 464654684,];
  /// الحصول على جميع الاقسام
  Future<List<Map<String, dynamic>>> getAllSections() async {
    log('databse getAllSections');

    await initDatabase();
    log("databse getAllSections db.query('section') = == = ${db.query('section')}");
 // query 
 //  بتاحد اسم الجدول 
 // 
    List<Map<String, dynamic>> sections = await db.query('section');
    log('databse getAllSections sections ::: $sections');

    return sections;
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  ///  اضافة قسم
  Future<int> insertSection(String name) async {
    log('insertSection $name');

    await initDatabase();

    // تحقق مما إذا كان الاسم موجودًا بالفعل في جدول القسم
    List<Map<String, dynamic>> existingSections = await db.query(
      'section',
      where: 'name = ?',
      whereArgs: [name],
    );

    if (existingSections.isNotEmpty) {
      log('existingSections.isNotEmpty ${existingSections.isNotEmpty}');
      return -1;
    } else {
      // (unique) إذا كان الاسم فريدًا
      // فابدأ بالإدراج
      return await db.insert('section', {'name': name});
    }
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  ///  تعديل قسم
  Future<void> updateSectionName(int id, String newName) async {
    log('updateSectionName ::: $newName');

    await initDatabase();
    int index = await db.update('section', {'name': newName},
        where: 'id = ?', whereArgs: [id]);
    log('updateSectionName :::  index = $index');
    log('updateSectionName ::: new name $newName');
    await getAllSections();
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  ///  حذف قسم
  Future<void> deleteSection(int id) async {
    log('deleteSection $id');

    await initDatabase();
    await db.delete('section', where: 'id = ?', whereArgs: [id]);
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  ///  احصل على العناصر حسب معرف القسم
  Future<List<Map<String, dynamic>>> getItemsBySectionId(int sectionId) async {
    await initDatabase();
    return await db
        .query('items', where: 'sectionId = ?', whereArgs: [sectionId]);
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  ///  اضافة عنصر
  Future<int> insertItem(
      String name, String filePath, String fileType, int sectionId) async {
    await initDatabase();
    return await db.insert('items', {
      'name': name,
      'filePath': filePath,
      'fileType': fileType,
      'sectionId': sectionId
    });
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  ///  اضافة عنصر
  ///
  Future<void> updateItemName(int id, String newName) async {
    log('updateItemName');

    await initDatabase();

    await db.update('items', {'name': newName},
        where: 'id = ?', whereArgs: [id]);
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  ///  حذف عنصر
  ///
  Future<void> deleteItem(int id) async {
    log('deleteItem');

    await initDatabase();

    await db.delete('items', where: 'id = ?', whereArgs: [id]);
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
 Future<List<Map<String, dynamic>>> searchItemsByName(String query) async {
    await initDatabase();
    return await db.query(
      'items',
      where: 'name LIKE ?',
      whereArgs: ['%$query%'],
    );
  }
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
  /// اغلاف قاعدة البيانات
  ///
  Future<void> dispose() async {
    log('dispose DataBase');

    await db.close();
  }

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
}
